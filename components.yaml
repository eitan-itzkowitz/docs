---
components:
  schemas:
    # ========== SECTION: CORE COMPONENTS ==========
    # Defines foundational components used across models.

    # MONETARY VALUE
    MonetaryValue:
      type: object
      title: MonetaryValue
      description: >-
        A standardized format for monetary values, including amount and
        currency.
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: double
          description: >-
            The monetary amount, formatted as a numeric value with up to two
            decimal places. Negative values represent credits or refunds.
          examples:
            - 1234.56
            - -500
        currency:
          type: string
          description: >-
            The currency used, following the ISO 4217 standard (e.g., USD, EUR, GBP).
          pattern: '^[A-Z]{3}$'
          examples:
            - USD
            - EUR

    # TAX RATE
    TaxRate:
      type: object
      title: TaxRate
      description: >-
        The Tax Rate model documents tax configurations for a company or firm.
        It provides details about tax rates, including their type, jurisdiction,
        calculation method, and parameters.

        **Effective Date Rules:**
        - If no `effectiveDate` is set, the tax rate is assumed to be effective as of `createdAt`.
        - If multiple tax rates have overlapping `effectiveDate` ranges, all applicable rates will be considered.
        - If `effectiveDate` is in the future, the tax rate will not be applied until that date.
        - Effective date ranges are inclusive of both start and end bounds.
        - If a tax rate is superseded by another, the superseding rate takes precedence.
      required:
        - id
        - createdAt
        - entity
        - displayName
        - jurisdictionType
        - jurisdictionName
        - calculationType
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the tax rate, auto-generated by the system.
        createdAt:
          type: string
          format: date-time
          description: >-
            The timestamp when the tax rate was created.
        updatedAt:
          type: string
          format: date-time
          description: >-
            The timestamp when the tax rate was last updated.
        entity:
          $ref: "#/components/schemas/EntityReference"
          description: >-
            The entity (Company or Firm) this tax rate applies to.
        displayName:
          type: string
          description: >-
            The display name of the tax rate, such as "California Sales Tax."
        taxType:
          type: string
          description: >-
            The type of tax associated with this rate.
          enum:
            - payroll_employer
            - payroll_withholding
            - sales_tax
            - value_added_tax
            - income_tax
            - franchise_tax
            - excise_tax
            - real_property_tax
            - customs_duty
        jurisdictionType:
          type: string
          description: >-
            The jurisdiction where this tax applies.
          enum:
            - Federal
            - State
            - City
            - County
            - Province
            - Other
        jurisdictionName:
          type: string
          description: >-
            The jurisdiction name where the tax applies, e.g., 'California'.
        calculationType:
          type: string
          description: >-
            Specifies how the tax is calculated and determines which parameters are required.
          enum:
            - percentage_flat
            - percentage_progressive
            - flat_per_tier
            - flat_per_unit
            - flat
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time period during which this tax rate is in effect.
        supersededBy:
          type: string
          description: >-
            If applicable, references the tax rate that supersedes this one. The superseding rate takes precedence.

    # ADDRESS
    Address:
      type: object
      title: Address
      description: >-
        Represents structured address information used across various entities, including Companies and Firms.
        Ensures consistency and supports integration with third-party geolocation or mapping services.
      required:
        - id
        - address1
        - city
        - state
        - zip
        - country
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the address, auto-generated by the system.
        address1:
          type: string
          description: >-
            The primary street address, including building number or PO Box. Example: "123 Main Street."
        address2:
          type: string
          description: >-
            Additional address details, such as apartment, suite, floor, or unit number. Example: "Apt 4B."
        city:
          type: string
          description: >-
            The city or locality of the address.
        state:
          type: string
          description: >-
            The state, province, or region of the address. Use the full name or recognized abbreviation (e.g., "California" or "CA").
        zip:
          type: string
          description: >-
            The postal or ZIP code for the address.
        country:
          type: string
          description: >-
            The country of the address, following **ISO 3166-1 alpha-2** codes (e.g., "US", "CA", "GB").
        timeZone:
          type: string
          description: >-
            The time zone associated with the address. This is useful for scheduling and regional data synchronization.
        coordinates:
          type: object
          description: >-
            Geographic coordinates (latitude and longitude) for the address. This is optional and primarily used for mapping or geolocation purposes.
          properties:
            latitude:
              type: number
              description: >-
                The latitude of the address.
              format: float
            longitude:
              type: number
              description: >-
                The longitude of the address.
              format: float

    # EFFECTIVE RANGE
    EffectiveRange:
      type: object
      title: EffectiveRange
      description: >-
        Defines a start and optional end date for time-based models, ensuring controlled 
        validity periods for items such as Tax Rates, Reporting Classes, Permissions, 
        and Categorization Assignments.
    
        **Effective Range Rules:**
        - If `startDate` is not set, the item is assumed to be active as of `createdAt`.
        - If `endDate` is missing, the item remains active indefinitely.
        - Effective ranges **must be inclusive**—the item is valid from `startDate` through `endDate`.
        - If multiple items have overlapping effective ranges, all are considered **active** unless a conflict resolution rule applies.
        - If an item is superseded by another, the **newer item takes precedence** while preserving historical data.
    
      properties:
        startDate:
          type: string
          format: date-time
          description: >-
            The date when the item becomes active.
          example: "2024-01-01T00:00:00Z"
    
        endDate:
          type: string
          format: date-time
          description: >-
            The optional date when the item expires. If not set, the item is considered 
            active indefinitely.
          example: "2025-12-31T23:59:59Z"
    
        supersededBy:
          type: string
          description: >-
            If applicable, references the item that replaces this one. Superseded items 
            should remain in history for auditability.
          example: "tax-rate-456"

    # ========== SECTION: ENTITIES ==========
    # Defines the entities ecosystem at Puzzle.

    ## --- Subsection: Puzzle Entities ---
    # Defines core entities within Puzzle.

    # COMPANY
    Company:
      type: object
      title: Company
      description: >-
        Represents a company using the platform. Includes legal, financial, and operational details.
      required:
        - id
        - name
        - entityType
        - industry
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the company.
        name:
          type: string
          description: >-
            The registered name of the company.
        entityType:
          $ref: "#/components/schemas/EntityType"
          description: >-
            The legal entity type of the company.
        billingModel:
          $ref: "#/components/schemas/BillingModel"
          description: >-
            The billing model defining the company's payment structure and subscription details.
        industry:
          $ref: "#/components/schemas/Industry"
          description: >-
            The industry or sector in which the company operates.
        address:
          type: string
          description: >-
            The company’s primary business address.
        website:
          type: string
          description: >-
            The company’s official website.

    # FIRM
    Firm:
      type: object
      title: Firm
      description: >-
        Represents an external firm providing services to client companies, such as accounting, legal, or consulting firms.
      required:
        - id
        - name
        - industry
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the firm.
        name:
          type: string
          description: >-
            The registered name of the firm.
        industry:
          type: string
          enum:
            - accounting
            - legal
            - payroll
            - consulting
            - generalBackOffice
          description: >-
            The industry or sector in which the firm operates.

    # USER
    User:
      type: object
      title: User
      description: >-
        An individual with a credential in the system. Includes details about their role and affiliation.
      required:
        - id
        - name
        - email
        - createdAt
        - role
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the user.
        name:
          type: string
          description: >-
            The full name of the user.
        email:
          type: string
          description: >-
            The email address associated with the user.
        createdAt:
          type: string
          format: date-time
          description: >-
            The date and time when the user was created.
        updatedAt:
          type: string
          format: date-time
          description: >-
            The date and time when the user was last updated.

    ## --- Subsection: Roles and Permissions ---
    # Defines roles and permissions that can be assigned to entities at Puzzle.

    # ROLE
    Role:
      type: object
      title: Role
      description: >-
        Defines a user's role within the system, categorizing their relationship to a company or firm.
      properties:
        roleType:
          type: string
          description: >-
            The user's relationship to the company or firm.
          enum:
            - owner
            - executive
            - employee
            - contractor
            - consultant
        function:
          type: string
          description: >-
            The primary area of expertise or responsibility for the user.
          enum:
            - accounting
            - finance
            - operations
            - technology
            - legal
            - admin

    # PERMISSION
    Permission:
      type: object
      title: Permission
      description: >-
        Defines user access control by specifying which financial modules
        a user can interact with and their allowed actions.

        Some permissions imply additional access:
        - `finalize` → automatically grants `view` and `create`
        - `edit` → automatically grants `view`
        - `void` → automatically grants `edit`
        - `delete` must always be explicitly assigned
      properties:
        group:
          type: string
          description: >-
            The financial data scope or module the permission applies to.
          enum:
            - financialStatements
            - generalLedger
            - bankTransactions
            - bills
            - invoices
            - inbox
        actions:
          type: array
          description: >-
            The allowed actions within the specified scope.
          items:
            type: object
            properties:
              action:
                type: string
                enum:
                  - view
                  - create
                  - finalize
                  - edit
                  - void
                  - delete
              implies:
                type: array
                description: >-
                  Actions automatically granted when this action is assigned.
                items:
                  type: string
                  enum:
                    - view
                    - create
                    - edit
        displayName:
          type: string
          description: >-
            Defines how a user is identified when performing actions or
            sending messages. Used for firm employees to send messages
            on behalf of the firm if necessary.
          enum:
            - self
            - entityName
            - other

    # PERMISSION SET
    PermissionSet:
      type: object
      title: PermissionSet
      description: >-
        Defines a set of permissions assigned to a user for a specific entity (Company or Firm).
        - A user can have multiple permission sets.
        - Each user-entity pair can have only one permission set at a time.
        - Permissions can be time-bound, allowing scheduled access changes.
      required:
        - id
        - userId
        - entityId
        - entityType
        - permissions
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the permission set.
        userId:
          type: string
          description: >-
            The user assigned to this permission set.
          $ref: "#/components/schemas/User"
        entityId:
          type: string
          description: >-
            The entity this permission set applies to.
        entityType:
          type: string
          enum:
            - company
            - firm
          description: >-
            Specifies whether this permission set applies to a Company or a Firm.
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
          description: >-
            A list of permissions assigned to the user for this entity.
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time period during which this permission set is active.

    ## --- Subsection: Entity Attributes ---
    # Defines attributes that can be assigned to entities at Puzzle.

    # LEGAL ENTITY TYPE
    LegalEntityType:
      type: string
      title: EntityType
      description: >-
        The legal entity type of the company, impacting tax reporting and
        compliance.
      enum:
        - cCorp
        - llc
        - partnership
        - sCorp
        - soleProprietorship
        - professionalServiceCorporation

    # INDUSTRY
    Industry:
      type: string
      title: Industry
      description: >-
        Represents the industry or sector the company operates in.
      enum:
        - realEstate
        - restaurant
        - healthcare
        - other
        - consumerOnPremise
        - retail
        - professionalServices
        - homeServices
        - legal
        - saas
        - manufacturing
        - shortTermRental
        - construction
        - transportation
        - ecommerce
        - finance

    # BILLING MODEL
    BillingModel:
      type: array
      title: BillingModel
      description: >-
        Represents the types of billing structures a company can have.
      items:
        type: string
        enum:
          - annualSubscription
          - monthlySubscription
          - addOns
          - hourlyBilling
          - transactionBased
          - usageBased
          - other
          - fixedFee

    # ========== SECTION: ENTITY MAPPING & RELATIONSHIPS ==========

    ## --- Subsection: Entity to Entity Mapping ---
    # Support mapping of entities to other entities.

    

    # ========== SECTION: OBJECT MAPPING & RELATIONSHIPS ==========
    # Defines mappings between external and internal objects, account categorizations,
    # and data transformations.

    ## --- Subsection: External to Internal Mappings ---
    # Maps external system objects (e.g., QBO, Stripe) to internal Puzzle objects.

    ## --- Subsection: Internal Mappings ---
    # Maps internal objects within Puzzle to categories or other logical groupings.

    # Defines mappings between entities and entity attributes.

    ## --- Subsection: External to Internal Mappings ---
    # Maps external system objects (e.g., QBO, Stripe) to internal Puzzle objects.

    ## --- Subsection: Internal Mappings ---
    # Maps internal objects within Puzzle to categories or other logical groupings.

    ## --- Subsection: Object & Data Transformation ---
    # Defines cross-object relationships and transformation rules.

    # ========== SECTION: ACCOUNTING STRUCTURES ==========
    # Defines key accounting-related structures, including Chart of Accounts and
    # revenue recognition rules.

    ## --- Subsection: General Ledger & Financial Accounts ---
    # Core financial account structures, including GL accounts and financial institutions.

    ## --- Subsection: Revenue Recognition & Prepaid Expenses ---
    # Models handling revenue recognition schedules and prepaid expense amortization.

    # ========== SECTION: OPERATIONAL ENTITIES ==========
    # Defines non-financial operational models such as user roles, firms, and access control.

    ## --- Subsection: User & Permissions ---
    # Models governing user access, roles, and security structures.

    ## --- Subsection: Firms & Relationships ---
    # Defines firms, clients, and inter-entity relationships.

    # ========== SECTION: SYSTEM & METADATA ==========
    # Defines internal system components used for tracking changes, metadata, and
    # effective dating.

    ## --- Subsection: Effective Dates & Status Tracking ---
    # Defines time-based validity and lifecycle status tracking.

    ## --- Subsection: System Metadata ---
    # Metadata structures used for logging, auditing, and versioning.
