---
components:
  schemas:
    # ========== SECTION: CORE COMPONENTS ==========
    # Defines foundational components used across models.

    # MONETARY VALUE
    MonetaryValue:
      type: object
      title: MonetaryValue
      description: >-
        A standardized format for monetary values, including amount and
        currency.
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: double
          description: >-
            The monetary amount, formatted as a numeric value with up to two
            decimal places. Negative values represent credits or refunds.
          examples:
            - 1234.56
            - -500
        currency:
          type: string
          description: >-
            The currency used, following the ISO 4217 standard (e.g., USD, EUR, GBP).
          pattern: '^[A-Z]{3}$'
          examples:
            - USD
            - EUR

    # TAX RATE
    TaxRate:
      type: object
      title: TaxRate
      description: >-
        The Tax Rate model documents tax configurations for a company or firm.
        It provides details about tax rates, including their type, jurisdiction,
        calculation method, and parameters.

        **Effective Date Rules:**
        - If no `effectiveDate` is set, the tax rate is assumed to be effective as of `createdAt`.
        - If multiple tax rates have overlapping `effectiveDate` ranges, all applicable rates will be considered.
        - If `effectiveDate` is in the future, the tax rate will not be applied until that date.
        - Effective date ranges are inclusive of both start and end bounds.
        - If a tax rate is superseded by another, the superseding rate takes precedence.
      required:
        - id
        - createdAt
        - entity
        - displayName
        - jurisdictionType
        - jurisdictionName
        - calculationType
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the tax rate, auto-generated by the system.
        createdAt:
          type: string
          format: date-time
          description: >-
            The timestamp when the tax rate was created.
        updatedAt:
          type: string
          format: date-time
          description: >-
            The timestamp when the tax rate was last updated.
        entity:
          $ref: "#/components/schemas/EntityReference"
          description: >-
            The entity (Company or Firm) this tax rate applies to.
        displayName:
          type: string
          description: >-
            The display name of the tax rate, such as "California Sales Tax."
        taxType:
          type: string
          description: >-
            The type of tax associated with this rate.
          enum:
            - payroll_employer
            - payroll_withholding
            - sales_tax
            - value_added_tax
            - income_tax
            - franchise_tax
            - excise_tax
            - real_property_tax
            - customs_duty
        jurisdictionType:
          type: string
          description: >-
            The jurisdiction where this tax applies.
          enum:
            - Federal
            - State
            - City
            - County
            - Province
            - Other
        jurisdictionName:
          type: string
          description: >-
            The jurisdiction name where the tax applies, e.g., 'California'.
        calculationType:
          type: string
          description: >-
            Specifies how the tax is calculated and determines which parameters are required.
          enum:
            - percentage_flat
            - percentage_progressive
            - flat_per_tier
            - flat_per_unit
            - flat
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time period during which this tax rate is in effect.
        supersededBy:
          type: string
          description: >-
            If applicable, references the tax rate that supersedes this one. The superseding rate takes precedence.

    # ========== SECTION: LISTS ==========
    # Defines reference lists embedded in other models.

    # ENTITY TYPE
    EntityType:
      type: string
      title: EntityType
      description: >-
        The legal entity type of the company, impacting tax reporting and
        compliance.
      enum:
        - cCorp
        - llc
        - partnership
        - sCorp
        - soleProprietorship
        - professionalServiceCorporation

    # INDUSTRY
    Industry:
      type: string
      title: Industry
      description: >-
        Represents the industry or sector the company operates in.
      enum:
        - realEstate
        - restaurant
        - healthcare
        - other
        - consumerOnPremise
        - retail
        - professionalServices
        - homeServices
        - legal
        - saas
        - manufacturing
        - shortTermRental
        - construction
        - transportation
        - ecommerce
        - finance

    # BILLING MODEL
    BillingModel:
      type: array
      title: BillingModel
      description: >-
        Represents the types of billing structures a company can have.
      items:
        type: string
        enum:
          - annualSubscription
          - monthlySubscription
          - addOns
          - hourlyBilling
          - transactionBased
          - usageBased
          - other
          - fixedFee
    
    # ========== SECTION: OBJECTS ==========
    # Defines core business objects representing real-world entities.
    
    ## --- Subsection: Core Objects ---
    # Primary entities within the system, including financial and operational structures.
    
    ## --- Subsection: Subobjects ---
    # Supporting objects that extend core objects with additional functionality.
    
    # ========== SECTION: MAPPING & RELATIONSHIPS ==========
    # Defines mappings between external and internal objects, account categorizations, 
    # and data transformations.
    
    ## --- Subsection: External to Internal Mappings ---
    # Maps external system objects (e.g., QBO, Stripe) to internal Puzzle objects.
    
    ## --- Subsection: Internal Mappings ---
    # Maps internal objects within Puzzle to categories or other logical groupings.
    
    ## --- Subsection: Object & Data Transformation ---
    # Defines cross-object relationships and transformation rules.
    
    # ========== SECTION: ACCOUNTING STRUCTURES ==========
    # Defines key accounting-related structures, including Chart of Accounts and 
    # revenue recognition rules.
    
    ## --- Subsection: General Ledger & Financial Accounts ---
    # Core financial account structures, including GL accounts and financial institutions.
    
    ## --- Subsection: Revenue Recognition & Prepaid Expenses ---
    # Models handling revenue recognition schedules and prepaid expense amortization.
    
    # ========== SECTION: OPERATIONAL ENTITIES ==========
    # Defines non-financial operational models such as user roles, firms, and access control.
    
    ## --- Subsection: User & Permissions ---
    # Models governing user access, roles, and security structures.
    
    ## --- Subsection: Firms & Relationships ---
    # Defines firms, clients, and inter-entity relationships.
    
    # ========== SECTION: SYSTEM & METADATA ==========
    # Defines internal system components used for tracking changes, metadata, and 
    # effective dating.
    
    ## --- Subsection: Effective Dates & Status Tracking ---
    # Defines time-based validity and lifecycle status tracking.
    
    ## --- Subsection: System Metadata ---
    # Metadata structures used for logging, auditing, and versioning.

    # COMPANY
    Company:
      type: object
      title: Company
      description: >-
        Represents a company using the platform. Includes legal, financial, and operational details.
      required:
        - id
        - name
        - entityType
        - industry
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the company.
        name:
          type: string
          description: >-
            The registered name of the company.
        entityType:
          $ref: "#/components/schemas/EntityType"
          description: >-
            The legal entity type of the company.
        billingModel:
          $ref: "#/components/schemas/BillingModel"
          description: >-
            The billing model defining the company's payment structure and subscription details.
        industry:
          $ref: "#/components/schemas/Industry"
          description: >-
            The industry or sector in which the company operates.
        address:
          type: string
          description: >-
            The company’s primary business address.
        website:
          type: string
          description: >-
            The company’s official website.

    # FIRM
    Firm:
      type: object
      title: Firm
      description: >-
        Represents an external firm providing services to client companies, such as accounting, legal, or consulting firms.
      required:
        - id
        - name
        - industry
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the firm.
        name:
          type: string
          description: >-
            The registered name of the firm.
        industry:
          type: string
          enum:
            - accounting
            - legal
            - payroll
            - consulting
            - generalBackOffice
          description: >-
            The industry or sector in which the firm operates.

    # ROLE
    Role:
      type: object
      title: Role
      description: >-
        Defines a user's role within the system, categorizing their relationship to a company or firm.
      properties:
        roleType:
          type: string
          description: >-
            The user's relationship to the company or firm.
          enum:
            - owner
            - executive
            - employee
            - contractor
            - consultant
        function:
          type: string
          description: >-
            The primary area of expertise or responsibility for the user.
          enum:
            - accounting
            - finance
            - operations
            - technology
            - legal
            - admin

    # USER
    User:
      type: object
      title: User
      description: >-
        An individual with a credential in the system. Includes details about their role and affiliation.
      required:
        - id
        - name
        - email
        - createdAt
        - role
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the user.
        name:
          type: string
          description: >-
            The full name of the user.
        email:
          type: string
          description: >-
            The email address associated with the user.
        createdAt:
          type: string
          format: date-time
          description: >-
            The date and time when the user was created.
        updatedAt:
          type: string
          format: date-time
          description: >-
            The date and time when the user was last updated.

    # PERMISSION
    Permission:
      type: object
      title: Permission
      description: >-
        Defines user access control by specifying which financial modules
        a user can interact with and their allowed actions.

        Some permissions imply additional access:
        - `finalize` → automatically grants `view` and `create`
        - `edit` → automatically grants `view`
        - `void` → automatically grants `edit`
        - `delete` must always be explicitly assigned
      properties:
        group:
          type: string
          description: >-
            The financial data scope or module the permission applies to.
          enum:
            - financialStatements
            - generalLedger
            - bankTransactions
            - bills
            - invoices
            - inbox
        actions:
          type: array
          description: >-
            The allowed actions within the specified scope.
          items:
            type: object
            properties:
              action:
                type: string
                enum:
                  - view
                  - create
                  - finalize
                  - edit
                  - void
                  - delete
              implies:
                type: array
                description: >-
                  Actions automatically granted when this action is assigned.
                items:
                  type: string
                  enum:
                    - view
                    - create
                    - edit
        displayName:
          type: string
          description: >-
            Defines how a user is identified when performing actions or
            sending messages. Used for firm employees to send messages
            on behalf of the firm if necessary.
          enum:
            - self
            - entityName
            - other
    # PERMISSION SET
    PermissionSet:
      type: object
      title: PermissionSet
      description: >-
        Defines a set of permissions assigned to a user for a specific entity (Company or Firm).
        - A user can have multiple permission sets.
        - Each user-entity pair can have only one permission set at a time.
        - Permissions can be time-bound, allowing scheduled access changes.
      required:
        - id
        - userId
        - entityId
        - entityType
        - permissions
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the permission set.
        userId:
          type: string
          description: >-
            The user assigned to this permission set.
          $ref: "#/components/schemas/User"
        entityId:
          type: string
          description: >-
            The entity this permission set applies to.
        entityType:
          type: string
          enum:
            - company
            - firm
          description: >-
            Specifies whether this permission set applies to a Company or a Firm.
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
          description: >-
            A list of permissions assigned to the user for this entity.
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time period during which this permission set is active.
    # ENTITY ROLE
    EntityRole:
      type: object
      title: EntityRole
      description: >-
        Defines a user's role within a specific entity (Company or Firm).
        - A user can have multiple entity roles.
        - Each user-entity pair can have only one assigned role at a time.
        - Roles can be time-bound, allowing scheduled transitions between roles.
      required:
        - id
        - userId
        - entityId
        - entityType
        - role
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the entity role assignment.
        userId:
          type: string
          description: >-
            The user assigned to this role.
          $ref: "#/components/schemas/User"
        entityId:
          type: string
          description: >-
            The entity this role applies to.
        entityType:
          type: string
          enum:
            - company
            - firm
          description: >-
            Specifies whether this role applies to a Company or a Firm.
        role:
          $ref: "#/components/schemas/Role"
          description: >-
            The user’s designated role within the entity.
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time period during which this role is active.
    # EFFECTIVE DATE
    EffectiveDate:
      type: object
      title: EffectiveDate
      description: >-
        Defines the validity period for an entity (e.g., TaxRate, Reporting Class, Permissions).

        **Effective Date Rules:**
        - If no `effectiveDate` is set, the entity is assumed to be effective as of `createdAt`.
        - If multiple entities have overlapping `effectiveDate` ranges, all applicable entities will be considered.
        - If `effectiveDate` is in the future, the entity will not be applied until that date.
        - Effective date ranges are inclusive of both start and end bounds.
        - If an entity is superseded by another, the superseding entity takes precedence.

      properties:
        effectiveDate:
          type: string
          format: date-time
          description: >-
            The start date when the entity becomes active.
        expirationDate:
          type: string
          format: date-time
          description: >-
            The optional end date when the entity expires.
        supersededBy:
          type: string
          description: >-
            If applicable, references the entity that replaces this one.
    # REPORTING CLASS
    ReportingClass:
      type: object
      title: ReportingClass
      description: >-
        A Reporting Class is a grouping mechanism for Segments used to categorize
        transactions for financial reporting purposes.

        **Common Use Cases:**
        - Organizing transactions by **Department** (e.g., Sales, Marketing).
        - Classifying expenses by **Location** (e.g., East Coast, West Coast).
        - Custom classifications for advanced reporting.

      required:
        - id
        - name
        - type
        - createdAt
        - createdBy
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the Reporting Class.
        name:
          type: string
          description: >-
            The user-defined name of the Reporting Class.
        description:
          type: string
          description: >-
            An optional field providing additional details about the Reporting Class.
        type:
          type: string
          description: >-
            Specifies the classification type.
          enum:
            - location
            - department
            - custom
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time range during which the Reporting Class is valid.
        createdBy:
          $ref: "#/components/schemas/User"
          description: >-
            A reference to the user who created the Reporting Class.
        parentClass:
          $ref: "#/components/schemas/ReportingClass"
          description: >-
            (Optional) If applicable, references a parent Reporting Class for hierarchical structuring.
        segments:
          type: array
          description: >-
            List of Segments associated with this Reporting Class.
          items:
            $ref: "#/components/schemas/Segment"

    # SEGMENT
    Segment:
      type: object
      title: Segment
      description: >-
        A Segment represents a detailed subcategory within a Reporting Class, used
        to further classify financial transactions.

        Each Reporting Class consists of multiple Segments that define finer
        categorizations.

      required:
        - id
        - name
        - reportingClass
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the Segment.
        name:
          type: string
          description: >-
            The name of the Segment within its parent Reporting Class.
        description:
          type: string
          description: >-
            (Optional) Provides additional context about the Segment.
        effectivePeriod:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            The time range during which the Segment is valid.
        createdBy:
          $ref: "#/components/schemas/User"
          description: >-
            The user who created this Segment.
        reportingClass:
          $ref: "#/components/schemas/ReportingClass"
          description: >-
            The Reporting Class to which this Segment belongs.
        parentSegment:
          $ref: "#/components/schemas/Segment"
          description: >-
            (Optional) If applicable, references a parent Segment for hierarchical structuring.
    # COMPANY-FIRM RELATIONSHIP
    CompanyFirm:
      type: object
      title: CompanyFirm
      description: >-
        Defines the relationship between a Company and a Firm.
        - A company may have multiple firm relationships at the same time.
        - Each firm can have different roles, such as tax preparation or advisory.
        - Historical relationships are maintained using effective dating.
      required:
        - id
        - companyId
        - firmId
        - role
        - effective
      properties:
        id:
          type: string
          description: >-
            A unique identifier for this Company-Firm relationship.
        companyId:
          type: string
          description: >-
            The company associated with this relationship.
          $ref: "#/components/schemas/Company"
        firmId:
          type: string
          description: >-
            The firm providing services to the company.
          $ref: "#/components/schemas/Firm"
        role:
          type: string
          description: >-
            Defines the firm's role in relation to the company.
          enum:
            - accounting
            - audit
            - tax
            - advisory
            - generalBackOffice
            - other
        effective:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            Specifies when the relationship started and, if applicable, ended.
    # ADDRESS
    Address:
      type: object
      title: Address
      description: >-
        Represents structured address information used across various entities, including Companies and Firms.
        Ensures consistency and supports integration with third-party geolocation or mapping services.
      required:
        - id
        - address1
        - city
        - state
        - zip
        - country
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the address, auto-generated by the system.
        address1:
          type: string
          description: >-
            The primary street address, including building number or PO Box. Example: "123 Main Street."
        address2:
          type: string
          description: >-
            Additional address details, such as apartment, suite, floor, or unit number. Example: "Apt 4B."
        city:
          type: string
          description: >-
            The city or locality of the address.
        state:
          type: string
          description: >-
            The state, province, or region of the address. Use the full name or recognized abbreviation (e.g., "California" or "CA").
        zip:
          type: string
          description: >-
            The postal or ZIP code for the address.
        country:
          type: string
          description: >-
            The country of the address, following **ISO 3166-1 alpha-2** codes (e.g., "US", "CA", "GB").
        timeZone:
          type: string
          description: >-
            The time zone associated with the address. This is useful for scheduling and regional data synchronization.
        coordinates:
          type: object
          description: >-
            Geographic coordinates (latitude and longitude) for the address. This is optional and primarily used for mapping or geolocation purposes.
          properties:
            latitude:
              type: number
              description: >-
                The latitude of the address.
              format: float
            longitude:
              type: number
              description: >-
                The longitude of the address.
              format: float
    Object:
      type: object
      title: Object
      description: >-
        Represents an identifiable system entity, whether internal (Puzzle) or external (QBO, NetSuite, Stripe).
      required:
        - id
        - objectType
        - entityOwner
        - schemaRef
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the object.
        entityOwner:
          type: string
          description: >-
            The system that owns the data, defining the system of record.
          enum:
            - puzzleLedger
            - puzzleGateway
            - puzzleBilling
            - qbo
            - netsuite
            - stripe
            - customIntegration
        objectType:
          type: string
          description: >-
            The category of the object (e.g., `customer`, `invoice`, `transaction`).
          enum:
            - customer
            - vendor
            - invoice
            - transaction
            - reconciliation
            - journalEntry
        schemaRef:
          type: string
          description: >-
            A reference to the schema definition of this object.
            - Internal example: `components.yaml#/schemas/Customer`
            - External example: `qbo_objects.yaml#/schemas/QBO_Customer`
        metadata:
          type: object
          description: >-
            Additional key-value metadata related to the object.
      examples:
        - id: "cust-987"
          entityOwner: puzzleLedger
          objectType: customer
          schemaRef: "components.yaml#/schemas/Customer"
          metadata:
            createdBy: "user-123"
            status: "active"
ObjectMapping:
  type: object
  title: ObjectMapping
  description: >-
    Defines how objects in external systems map to internal Puzzle objects.
  required:
    - id
    - mappedFrom
    - mappedTo
  properties:
    id:
      type: string
      description: >-
        A unique identifier for the mapping.
    mappedFrom:
      $ref: "#/components/schemas/Object"
      description: >-
        The external object being mapped.
    mappedTo:
      $ref: "#/components/schemas/Object"
      description: >-
        The internal Puzzle object it maps to.
    mappingSource:
      type: string
      enum:
        - system_rule
        - user_override
        - ai_suggestion
      description: >-
        The source of this mapping (e.g., automated system rule, user-defined override, or AI-assisted suggestion).
    effectiveDate:
      $ref: "#/components/schemas/EffectiveDate"
      description: >-
        The time range in which this mapping is valid.
    createdAt:
      type: string
      format: date-time
      description: >-
        Timestamp when the mapping was created.
    updatedAt:
      type: string
      format: date-time
      description: >-
        Timestamp when the mapping was last updated.
  examples:
    - id: mapping-123
      mappedFrom:
        id: "qbo-123"
        entityOwner: qbo
        objectType: customer
        schemaRef: "qbo_objects.yaml#/schemas/QBO_Customer"
      mappedTo:
        id: "puzzle-987"
        entityOwner: puzzleLedger
        objectType: customer
        schemaRef: "components.yaml#/schemas/Customer"
      mappingSource: system_rule
      effectiveDate:
        startDate: "2024-01-01"
        endDate: null
      createdAt: "2024-01-01T12:00:00Z"
      updatedAt: "2024-02-01T10:15:00Z"
  # FILE UPLOAD
  FileUpload:
    type: object
    title: FileUpload
    description: >-
      The File Upload model supports the management of files associated with various objects,
      such as Vendors, Bills, and Customers. It enables file uploads, retrieval, and metadata updates.
    required:
      - id
      - filename
      - contentType
      - size
      - downloadInfo
      - associatedObject
      - associations
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the file, auto-generated by the system.
      filename:
        type: string
        description: >-
          The name of the file as provided during upload. This field reflects the original file name for user reference.
      contentType:
        type: string
        description: >-
          The MIME type of the file, indicating its format (e.g., application/pdf, image/jpeg).
      size:
        type: integer
        description: >-
          The size of the file in bytes, representing its storage requirement.
      downloadInfo:
        type: string
        description: >-
          A URL for downloading the file or an API endpoint for file retrieval.
      associatedObject:
        type: string
        description: >-
          The Puzzle object type this file is associated with (e.g., `puzzleGatewayVendor`, `puzzleLedgerBill`).
      associations:
        type: array
        description: >-
          A list of specific object instances this file is associated with.
        items:
          type: object
          properties:
            id:
              type: string
              description: >-
                The unique identifier of the associated instance.
            source:
              type: string
              description: >-
                The system where this instance originates (e.g., `puzzleGateway`, `qbo`, `netsuite`).
      isDeleted:
        type: boolean
        description: >-
          Indicates if the file has been marked as deleted. Defaults to `false`.
      createdAt:
        type: string
        format: date-time
        description: >-
          Timestamp when the file was uploaded.
      updatedAt:
        type: string
        format: date-time
        description: >-
          Timestamp when the file metadata was last updated.
    examples:
      - id: file-987xyz654abc
        filename: w9_form_acme.pdf
        contentType: application/pdf
        size: 102400
        isDeleted: false
        downloadInfo: "https://example.com/download/file-987xyz654abc"
        associatedObject: puzzleGatewayVendor
        associations:
          - id: vendor-123
            source: puzzleGateway
          - id: qb-vendor-456
            source: qbo
      - id: file-123abc456def
        filename: invoice_march_2024.pdf
        contentType: application/pdf
        size: 204800
        isDeleted: false
        downloadInfo: "https://example.com/download/file-123abc456def"
        associatedObject: puzzleLedgerBill
        associations:
          - id: bill-789
            source: puzzleLedger
          - id: qb-bill-101
            source: qbo
  LedgerAccount:
    type: object
    title: LedgerAccount
    description: >-
      Represents a company's chart of accounts. Includes financial reporting details
      and supports hierarchical relationships.
    required:
      - id
      - companyId
      - displayName
      - accountNumber
      - accountType
      - currency
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the ledger account.
      companyId:
        type: string
        description: >-
          The company associated with this ledger account.
      displayName:
        type: string
        description: >-
          The name of the ledger account.
      accountNumber:
        type: string
        description: >-
          The account number as it appears in financial reports.
      accountType:
        type: string
        enum:
          - asset
          - contra-asset
          - liability
          - contra-liability
          - equity
          - revenue
          - contra-revenue
          - expense
        description: >-
          The high-level classification for the ledger account.
      currency:
        type: string
        description: >-
          The currency associated with this ledger account.
        pattern: '^[A-Z]{3}$'
      parentAccount:
        type: string
        description: >-
          The parent ledger account, if applicable.
      childAccounts:
        type: array
        description: >-
          Any child accounts associated with this ledger account.
        items:
          type: string
      effectiveStartDate:
        type: string
        format: date-time
        description: >-
          The date this ledger account became effective.
      effectiveEndDate:
        type: string
        format: date-time
        description: >-
          The date this ledger account is no longer in effect (if applicable).
  AccountCategory:
    type: object
    title: AccountCategory
    description: >-
      Predefined financial account categories used for standardization across companies.
    required:
      - id
      - categoryName
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the category.
      categoryName:
        type: string
        description: >-
          The name of the predefined financial category.
      description:
        type: string
        description: >-
          A brief description of this category.
      defaultMappings:
        type: array
        description: >-
          Default mappings for this category when a company is onboarded.
        items:
          type: string
  LedgerAccountMapping:
    type: object
    title: LedgerAccountMapping
    description: >-
      Defines how ledger accounts map to standardized account categories.
    required:
      - id
      - companyId
      - ledgerAccountId
      - categoryId
      - effectiveDates
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the category mapping.
      companyId:
        type: string
        description: >-
          The company associated with this mapping.
      ledgerAccountId:
        type: string
        description: >-
          The ledger account being mapped.
      categoryId:
        type: string
        description: >-
          The category to which this ledger account is mapped.
      effectiveDates:
        $ref: "#/components/schemas/EffectiveDate"
        description: >-
          The active period for this category mapping.
  FinancialInstitution:
    type: object
    title: FinancialInstitution
    description: >-
      Represents external financial institutions such as banks, payment processors, and payroll providers.
      Institutions are used as sources for financial accounts and transactions.
    required:
      - id
      - name
      - entityHost
      - sources
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the financial institution.
      name:
        type: string
        description: >-
          The display name of the institution (e.g., "Chase," "Stripe").
      entityHost:
        type: string
        description: >-
          The system that manages the financial institution.
        enum:
          - puzzleLedger
          - puzzleGateway
          - puzzleBilling
          - plaid
          - directIntegration
          - manual
      isSystemDefined:
        type: boolean
        description: >-
          Indicates if this financial institution is predefined by the system (e.g., Stripe, Mercury).
          If `false`, it was manually created by a user.
      sources:
        type: array
        description: >-
          The ingestion sources through which data is retrieved from this financial institution.
        items:
          type: string
          enum:
            - direct
            - plaid
            - manual
      createdAt:
        type: string
        format: date-time
        description: >-
          The timestamp when this financial institution was created.
      updatedAt:
        type: string
        format: date-time
        description: >-
          The timestamp when this financial institution was last updated.
  FinancialAccount:
    type: object
    title: FinancialAccount
    description: >-
      Represents a financial account linked to an entity (e.g., a company or firm).
      This model tracks balances, integration status, and ingestion sources.
    required:
      - id
      - name
      - associatedEntity
      - financialInstitution
      - accountType
      - createdAt
      - status
    properties:
      id:
        type: string
        description: >-
          A unique identifier for the financial account.
      name:
        type: string
        description: >-
          The user-defined name of the financial account (e.g., "Main Checking Account").
      associatedEntity:
        $ref: "#/components/schemas/Entity"
        description: >-
          The entity that owns this financial account (e.g., a company or firm).
      financialInstitution:
        $ref: "#/components/schemas/FinancialInstitution"
        description: >-
          The financial institution associated with this account.
      accountType:
        type: string
        description: >-
          The high-level type of financial account.
        enum:
          - bank
          - processor
      subType:
        type: string
        description: >-
          A more specific classification of the account type.
        enum:
          - checking
          - savings
          - brokerage
          - creditCard
          - payment
          - payroll
          - bill
      lastFour:
        type: string
  FinancialAccountMapping:
    type: object
    title: AccountMapping
    description: >-
      Defines how a financial account maps to one or more ledger accounts.
    required:
      - financialAccountId
      - ledgerAccountId
      - mappingType
    properties:
      financialAccountId:
        type: string
        description: >-
          References the financial account being mapped.
      ledgerAccountId:
        type: string
        description: >-
          References the ledger account to which transactions are assigned.
      mappingType:
        type: string
        description: >-
          Defines the type of mapping.
        enum:
          - direct
          - clearing
          - allocation
  FdicCoverage:
    type: object
    title: FdicCoverage
    description: >-
      Represents FDIC coverage details for depository accounts.
    required:
      - depositoryTotal
      - estimatedInsuranceCoverage
      - status
    properties:
      depositoryTotal:
        $ref: "#/components/schemas/MonetaryValue"
        description: >-
          The total balance of the account subject to FDIC coverage.
      estimatedInsuranceCoverage:
        $ref: "#/components/schemas/MonetaryValue"
        description: >-
          The estimated insured amount based on coverage limits.
      status:
        type: string
        description: >-
          The FDIC coverage status of the account.
        enum:
          - covered
          - partiallyCovered
          - notCovered
  IngestionSource:
    type: object
    title: IngestionSource
    description: >-
      Represents the source of financial data ingestion for a financial account.
    required:
      - sourceType
      - ingestionDates
    properties:
      sourceType:
        type: string
        description: >-
          The method of ingestion.
        enum:
          - direct
          - plaid
          - manual
      ingestionDates:
        type: array
        description: >-
          Historical ingestion periods.
        items:
          $ref: "#/components/schemas/EffectiveDate"
BankTransaction:
  type: object
  title: BankTransaction
  description: "Represents a financial transaction from a linked financial account, tracking metadata, categorization, and audit history."
  required:
    - id
    - companyId
    - financialAccountId
    - amount
    - date
    - status
  properties:
    id:
      type: string
      description: "Unique identifier for the transaction."
    companyId:
      type: string
      description: "The company to which this transaction belongs."
    financialAccountId:
      type: string
      description: "The financial account from which this transaction originated."
    amount:
      type: number
      format: float
      description: "Transaction amount in the account’s currency."
    date:
      type: string
      format: date
      description: "Date of the transaction."
    status:
      type: string
      enum:
        - pending
        - posted
        - voided
      description: "Current status of the transaction."
    categorization:
      $ref: "#/components/schemas/CategorizationLog"
    externalId:
      type: string
      description: "Unique transaction ID from an external system, if applicable."
    objectMappings:
      type: array
      description: "Links this transaction to mapped objects (e.g., Ramp to Puzzle category mapping)."
      items:
        $ref: "#/components/schemas/ObjectMapping"
    effectiveDate:
      $ref: "#/components/schemas/EffectiveDate"
    createdAt:
      type: string
      format: date-time
      description: "Timestamp when the transaction was created."
    updatedAt:
      type: string
      format: date-time
      description: "Timestamp when the transaction was last updated."
CategorizationLog:
  type: object
  title: CategorizationLog
  description: "Logs categorization changes, including sources, mappings, and user actions."
  required:
    - transactionId
    - previousCategory
    - newCategory
    - categorizedAt
    - categorizedBy
  properties:
    transactionId:
      type: string
      description: "The transaction associated with this categorization."
    previousCategory:
      type: string
      description: "The previous category assigned to the transaction."
    newCategory:
      type: string
      description: "The new category assigned to the transaction."
    categorizedAt:
      type: string
      format: date-time
      description: "Timestamp of the categorization change."
    categorizedBy:
      type: object
      description: "Tracks whether this categorization was system-inferred, rule-based, or user-driven."
      properties:
        objectType:
          type: string
          enum:
            - USER
            - RULE
            - AI_SUGGESTION
        objectId:
          type: string
          description: "The unique identifier of the user, rule, or AI model."
    objectMappingId:
      type: string
      description: "References the ObjectMapping ID used for this categorization (if applicable)."
    Vendor:
      type: object
      title: Vendor
      description: >-
        Represents counterparties for expenses and payables, including suppliers, service providers,
        and contractors. Supports external mappings and compliance tracking (e.g., 1099 eligibility).
      required:
        - id
        - company
        - legalName
        - description
        - is1099Vendor
        - type
        - taxIDType
        - status
        - source
      properties:
        id:
          type: string
          description: >-
            A unique identifier for the vendor, auto-generated by the system.
        company:
          $ref: "#/components/schemas/Company"
          description: >-
            The company that owns this vendor record.
        legalName:
          type: string
          description: >-
            The vendor’s registered legal name, as used for legal or tax purposes.
        dba:
          type: string
          description: >-
            The vendor's "Doing Business As" (DBA) name, if applicable.
        contactName:
          type: string
          description: >-
            The primary contact person at the vendor.
        description:
          type: string
          description: >-
            A brief description of the vendor or the services/products they provide.
        externalMapping:
          $ref: "#/components/schemas/ObjectMapping"
          description: >-
            References external system mappings (e.g., QBO, NetSuite) for this vendor.
        is1099Vendor:
          type: boolean
          description: >-
            Indicates if the vendor is a 1099-eligible vendor for tax reporting purposes (primarily relevant in the U.S.).
        type:
          type: string
          enum:
            - Individual
            - Business
          description: >-
            Specifies whether the vendor is an individual or a business entity.
        taxIDType:
          type: string
          enum:
            - SSN
            - EIN
            - ITIN
          description: >-
            The type of tax identification number associated with the vendor, if applicable.
        website:
          type: string
          description: >-
            The vendor’s official website URL.
        address:
          $ref: "#/components/schemas/Address"
          description: >-
            The vendor’s primary address, referencing the shared Address model.
        phoneNumber:
          type: string
          description: >-
            The vendor’s primary contact phone number.
        attachments:
          type: array
          description: >-
            A collection of file attachments related to the vendor (e.g., contracts, tax forms).
          items:
            $ref: "#/components/schemas/File"
        status:
          type: string
          enum:
            - Active
            - Inactive
            - Unknown
          description: >-
            Indicates the vendor's current status in the system.
        statusEffectiveDate:
          $ref: "#/components/schemas/EffectiveDate"
          description: >-
            Tracks when a vendor’s status became effective.
        source:
          type: string
          enum:
            - System
            - User
          description: >-
            Identifies whether the vendor record was system-generated or manually added by a user.
      examples:
        - id: vendor-123abc
          company:
            id: company-987xyz
            legalName: Example Corp
          legalName: Acme Corporation
          dba: Acme Co.
          contactName: Jane Smith
          description: Supplier of office furniture and equipment
          externalMapping:
            id: mapping-789
            mappedFrom:
              id: "qbo-456"
              entityOwner: qbo
              objectType: vendor
              schemaRef: "qbo_objects.yaml#/schemas/QBO_Vendor"
            mappedTo:
              id: "puzzle-123"
              entityOwner: puzzleLedger
              objectType: vendor
              schemaRef: "components.yaml#/schemas/Vendor"
          is1099Vendor: true
          type: Business
          taxIDType: EIN
          website: "https://www.acmeco.com"
          address:
            street: 123 Main Street
            city: New York
            state: NY
            zip: "10001"
            country: USA
          phoneNumber: "(555) 987-6543"
          attachments:
            - id: file-abc123
            - id: file-def456
          status: Active
          statusEffectiveDate:
            effectiveFrom: "2024-01-01"
          source: User
InternalObjectReference:
  type: object
  title: InternalObjectReference
  description: |
    A reference to an object that exists within Puzzle’s system.
    Used for linking internally stored objects like Puzzle Bills, Ledger Accounts, Vendors, etc.
  required:
    - id
    - entityOwner
    - objectType
  properties:
    id:
      type: string
      description: "The unique identifier for the internal Puzzle object."
    entityOwner:
      type: string
      description: "Always `puzzleLedger`, `puzzleGateway`, or other internal domains."
      enum:
        - puzzleLedger
        - puzzleGateway
        - puzzleBilling
    objectType:
      type: string
      description: "The type of object being referenced."
      enum:
        - Bill
        - LedgerAccount
        - Vendor
        - Customer
        - Payment
    schemaRef:
      type: string
      description: "The schema definition this reference points to."
      example: "components.yaml#/schemas/Bill"
ExternalObjectReference:
  type: object
  title: ExternalObjectReference
  description: |
    A reference to an object that exists in an external system.
    Used for linking objects from QuickBooks, NetSuite, Plaid, Stripe, etc.
  required:
    - id
    - entityOwner
    - objectType
  properties:
    id:
      type: string
      description: "The external system’s unique identifier for this object."
    entityOwner:
      type: string
      description: |
        The system where this object originates from (e.g., QBO, NetSuite, Stripe, Plaid).
      enum:
        - qbo
        - netsuite
        - plaid
        - stripe
    objectType:
      type: string
      description: "The type of external object being referenced."
      enum:
        - Bill
        - LedgerAccount
        - Vendor
        - Customer
        - Payment
    schemaRef:
      type: string
      description: "The schema definition in the external system."
      example: "qbo_objects.yaml#/schemas/QBO_Bill"
ObjectReference:
  type: object
  title: ObjectReference
  description: >-
    A reference to an internal Puzzle object or an external system object.
    This model standardizes how entities are referenced across different systems.
  required:
    - objectType
    - entityOwner
  properties:
    objectType:
      type: string
      description: >-
        The type of object being referenced. Internal Puzzle objects use `puzzle<Type>`,
        while external objects use `external<Type>`. This ensures clear differentiation.
      example: puzzleBill
    entityOwner:
      type: string
      description: >-
        The system that owns this object. For external entities, this indicates
        the source system (e.g., `qbo`, `netsuite`, `stripe`).
      example: puzzleLedger
    puzzleID:
      type: string
      description: >-
        The unique identifier for the Puzzle system object, if applicable.
      example: "bill-123"
    externalID:
      type: string
      description: >-
        The unique identifier for the external object, if applicable.
        This is typically used for mapping objects from external systems like QBO, Stripe, etc.
      example: "qbo-987"
    schemaRef:
      type: string
      description: >-
        A reference to the schema defining this object. For Puzzle objects, this links
        to the corresponding `components.yaml` definition. For external objects, this
        links to the appropriate external schema documentation.
      example: "components.yaml#/schemas/Bill"

---

ObjectMapping:
  type: object
  title: ObjectMapping
  description: >-
    Defines how objects in external systems map to internal Puzzle objects.
    This enables consistent data translation across different platforms.
  required:
    - id
    - mappedFrom
    - mappedTo
  properties:
    id:
      type: string
      description: >-
        A unique identifier for the mapping entry.
    mappedFrom:
      $ref: "#/components/schemas/ObjectReference"
      description: >-
        The external object being mapped, including its source system and schema.
    mappedTo:
      $ref: "#/components/schemas/ObjectReference"
      description: >-
        The internal Puzzle object this external object is mapped to.
  examples:
    - id: mapping-123
      mappedFrom:
        objectType: externalBill
        entityOwner: qbo
        externalID: "qbo-987"
        schemaRef: "qbo_objects.yaml#/schemas/QBO_Bill"
      mappedTo:
        objectType: puzzleBill
        entityOwner: puzzleLedger
        puzzleID: "bill-123"
        schemaRef: "components.yaml#/schemas/Bill"
