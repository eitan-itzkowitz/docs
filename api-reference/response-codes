---
title: Response Codes
description: Standardized API response codes for the Puzzle API.
---

# Response Codes

Select an API version to view the relevant response codes.

## Version 1.0

:::version version="1.0"

### Error Response Format
If an error occurs during a request, the response will be in the following format:

```json
{
    "errors": [
        {
            "message": "jwt expired", // Human-readable error message
            "code": "UNAUTHENTICATED" // Standard code, see list below
        }
    ]
}
Error Reference
HTTP Status Code	Error Code	Description
400	BAD_USER_INPUT	The input provided is invalid. This can include missing fields, invalid values, etc.
401	UNAUTHENTICATED	The authentication credentials provided are missing, invalid, or expired.
403	FORBIDDEN	You do not have permission to the requested resource.
404	RESOURCE_NOT_FOUND	No resource exists for the given ID.
409	RESOURCE_PROCESSING	The requested resource has not finished syncing in Puzzle. If this error occurs, try the request again later.
410	RESOURCE_GONE	A resource exists for the given ID, but it cannot be accessed. This is likely due to the resource being removed by the user in Puzzle.
422	RESOURCE_LOCKED	A resource exists for the given ID, but it cannot be updated. This is likely due to the resource being deactivated or locked by the user in Puzzle.
500	INTERNAL_SERVER_ERROR	An unexpected error has occurred on our end. Try the request again later, but if the error persists, please reach out to Puzzle support (api@puzzle.io).
:::

Version 1.1
:::version version="1.1"

Overview
The Puzzle API facilitates seamless interactions with our accounting software by providing clear and actionable response codes. This version introduces asynchronous processing, webhook integration, and expanded error classifications.

Asynchronous Processing
For requests too large or complex to process synchronously, the API will:

Return a 202 ACCEPTED response along with a status URL for polling.
Post results to a designated webhook when processing is complete.
Workflow: Sequence of Events
Authorization Check

Unauthorized requests return 401 UNAUTHORIZED or 403 FORBIDDEN.
Acknowledgment

Authorized requests receive an acknowledgment.
For async requests, a polling URL is returned.
Processing

The API applies business logic and verifies compliance with accounting rules.
Result Notification

Sync calls return results immediately.
Async calls update via polling URL and/or webhook.
Response Code Reference
Success Messages
Status	Code	Description
200	OK	The request was successful, and the result is included in the response.
201	RECEIVED	A POST request has been acknowledged and queued for processing.
202	ACCEPTED	The request is being processed asynchronously. A polling URL is provided.
Technical Errors
Status	Code	Description
500	SERVER_ERROR	An unexpected server-side error occurred.
502	GATEWAY_ERROR	The request could not be forwarded to the intended service or endpoint.
504	TIMEOUT	The request timed out before acknowledgment. Retry with exponential backoff.
429	TOO_MANY_REQUESTS	The client has exceeded the APIâ€™s rate limit. Retry after the indicated timeframe.
Authorization Errors
Status	Code	Description
401	UNAUTHORIZED	The API key is invalid or lacks the required permissions.
403	FORBIDDEN	The API key is valid, but the account lacks access to the requested resource.
Pipeline Errors
Status	Code	Description
400	MALFORMED	The request was improperly formatted (e.g., missing fields, unexpected values).
402	UNRECOGNIZED	Unprocessable parameters (e.g., unknown company ID, invalid COA account).
404	NOT_FOUND	The requested resource does not exist.
Accounting Validation Errors
Status	Code	Description
422	BUSINESS_VALIDATION	A rule violation occurred (e.g., locked period, invalid journal entry).
Webhook and Polling Details
Polling URL for Asynchronous Calls
Provided in the 202 ACCEPTED response.
Returns intermediate statuses (e.g., "In Progress") and final results.
Webhook Notifications
Configured in Puzzle account settings.
Includes:
Request ID
Updated Status
Error Details (if applicable)
Webhook Retry Logic
Failed webhook deliveries retry up to 3 times with exponential backoff.
Ensure your endpoint returns HTTP 200 OK to confirm delivery.
Examples
Synchronous Success Example
Request:

http
Copy
Edit
GET /transactions/{id}
Response:

json
Copy
Edit
{
  "statusCode": 200,
  "status": "OK",
  "data": {
    "transactionId": "123456",
    "amount": 1000,
    "currency": "USD"
  }
}
Asynchronous Response Example
Request:

http
Copy
Edit
POST /batch/transactions
Response:

json
Copy
Edit
{
  "statusCode": 202,
  "status": "ACCEPTED",
  "message": "Processing started. Check status URL for updates.",
  "statusUrl": "https://api.puzzle.com/status/123456789"
}
Webhook Example
Webhook Payload:

Response:

json
Copy
Edit
{
  "requestId": "123456789",
  "status": "PROCESSED",
  "result": {
    "successfulTransactions": 95,
    "failedTransactions": 5
  }
}
Polling Response Example
Request:

http
Copy
Edit
GET /status/123456789
Response:

json
Copy
Edit
{
  "statusCode": 200,
  "status": "IN_PROGRESS",
  "message": "Batch is 50% complete. Estimated time to completion: 3 minutes."
}
Final Polling Response:
Response:

json
Copy
Edit
{
  "statusCode": 200,
  "status": "COMPLETED",
  "message": "Batch processing complete.",
  "result": {
    "successfulTransactions": 95,
    "failedTransactions": 5
  }
}
:::

How to Implement in GitHub
